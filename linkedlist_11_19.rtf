{\rtf1\ansi\ansicpg949\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <stdio.h>\
#include <stdlib.h>\
#include <string.h>\
/*\
   (,) 
\f1 \'bf\'b9\'bf\'dc\'c3\'b3\'b8\'ae
\f0  
\f1 \'c3\'df\'b0\'a1
\f0 \
   Display 
\f1 \'b1\'b8\'c7\'f6
\f0 \
   strtok(?)
\f1 \'c0\'bb
\f0  
\f1 \'c0\'cc\'bf\'eb\'c7\'cf\'b4\'c2
\f0  
\f1 \'b9\'e6\'b9\'fd
\f0  
\f1 \'bf\'b9\'c1\'a6
\f0  
\f1 \'c3\'df\'b0\'a1
\f0 \
	*/\
\
typedef char element;\
typedef struct pointer\{\
	struct node_info *head;\
	struct node_info *tail;\
\}pointer;\
\
typedef struct node_info\{\
	element data; \
	struct node_info* next_pointer;\
	struct node_info* prev_pointer;\
\}node_info;\
\
void insert_node(pointer *target,int data)\{\
	node_info *new_node = malloc(sizeof(node_info));\
	new_node -> next_pointer = NULL;\
	new_node -> prev_pointer = NULL;\
	new_node -> data = data;\
	if(target->head == NULL)\
		target->head = target->tail = new_node;\
	else\{\
		target->tail-> next_pointer = new_node;\
		new_node->prev_pointer = target->tail;\
		target->tail = new_node; \
	\}\
\}\
node_info* getNode(node_info *target,char index_char)\{\
	while(target != NULL)\{\
		if(index_char == target->data) break;\
		target = target->next_pointer;\
	\}\
	return target;\
\}\
void Display(node_info *node)\{\
	while(node != NULL)\{\
		printf("%c",node->data);\
		node=node->next_pointer;\
	\}\
\}\
int main(int argc,char* argv[])\{\
	char data;\
	\
	FILE *fp=fopen(argv[1],"r");\
	pointer *L = (pointer *)malloc(sizeof(pointer));\
	L->head = NULL;\
	L->tail = NULL;\
	\
	while(fscanf(fp,"%c",&data)!=EOF)\{\
		if((data >= '1' && data <= '9')|| data == '.'|| data == '+' || data == '-' || data == ' ' || data == ')'|| data == '(')\{\
			insert_node(L,data);\
		\}\
		else continue; // 
\f1 \'c0\'df\'b8\'f8\'b5\'c8
\f0  
\f1 \'c0\'d4\'b7\'c2
\f0  
\f1 \'bf\'b9\'bf\'dc\'c3\'b3\'b8\'ae
\f0 \
	\}\
	fclose(fp);\
	\
	node_info *curr = L->head; \
	Display(curr);\
	/* Display 
\f1 \'b1\'b8\'c7\'f6
\f0 */\
\
	curr = L->head;\
	node_info *test= getNode(curr,' ');\
	test = getNode(curr,' ');\
	/* 
\f1 \'c0\'cc\'b0\'cd\'c0\'bb
\f0  
\f1 \'c0\'cc\'bf\'eb\'c7\'d8\'bc\'ad
\f0  
\f1 \'bd\'ba\'c6\'e4\'c0\'cc\'bd\'ba
\f0  
\f1 \'b9\'d9\'b8\'a6
\f0  
\f1 \'b1\'e2\'c1\'d8\'c0\'b8\'b7\'ce
\f0  
\f1 \'b3\'aa\'b4\'ad
\f0  
\f1 \'bc\'f6
\f0  
\f1 \'c0\'d6\'b4\'d9
\f0 .*/\
	printf("\\n");\
	\
	//
\f1 \'bf\'b9\'c1\'a6
\f0  1\
	curr = L->head;\
	while(curr != NULL || curr != test)\{\
		if(curr == test) \{\
			printf("\\n
\f1 \'b0\'b0\'c0\'ba
\f0  
\f1 \'c1\'f6\'c1\'a1
\f0 \\n");\
			break;\
		\}\
\
		printf("%c",curr->data);\
		curr = curr ->next_pointer;\
	\}\
	/*\
	//
\f1 \'bf\'b9\'c1\'a6
\f0  2\
	while(test != NULL)\{\
		printf("%c",test->data);\
		test = test-> next_pointer;\
	\}\
	*/\
	/*\
	   
\f1 \'c0\'a7\'bf\'cd
\f0  
\f1 \'b0\'b0\'c0\'cc
\f0  pointer
\f1 \'b8\'a6
\f0  
\f1 \'b3\'aa\'b4\'ad
\f0  
\f1 \'bc\'f6
\f0  
\f1 \'c0\'d6\'b4\'d9
\f0 .\
	   
\f1 \'c0\'cc\'b0\'c5\'b8\'a6
\f0  
\f1 \'c0\'cc\'bf\'eb\'c7\'d8\'be\'df
\f0  
\f1 \'c7\'d2
\f0  
\f1 \'b5\'ed
\f0  
\f1 \'c7\'cf\'b4\'d9
\f0 .\
	   */\
	curr = L->head;\
	while(curr != NULL)\{\
		node_info *next = curr->next_pointer;\
		free(curr);\
		curr = next;\
	\}//
\f1 \'c3\'ca\'b1\'e2\'c8\'ad\'c7\'cf\'b4\'c2
\f0  
\f1 \'ba\'ce\'ba\'d0
\f0 \
	free(L);\
	\
	return 0;\
\
	/*\
	   
\f1 \'c1\'d6\'bc\'ae\'c0\'cc
\f0  
\f1 \'b8\'b9\'c0\'b8\'b8\'e9
\f0  
\f1 \'bf\'c0\'c8\'f7\'b7\'c1
\f0  
\f1 \'b0\'a1\'b5\'b6\'bc\'ba\'c0\'cc
\f0  
\f1 \'b6\'b3\'be\'ee\'c1\'f8\'b4\'d9
\f0 .\
	   
\f1 \'c0\'cc\'b0\'c5\'bf\'a1
\f0  
\f1 \'b4\'eb\'c7\'d8
\f0  
\f1 \'b3\'ed\'c0\'c7
\f0  
\f1 \'c7\'d8\'be\'df
\f0  
\f1 \'c7\'d1\'b4\'d9
\f0 .\
	   */\
\
\
 \}\
}