{\rtf1\ansi\ansicpg949\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <stdio.h>\
#include <stdlib.h>\
#include <string.h>\
/*\
	
\f1 \'a1\'ae(,)\'a1\'af \'c3\'df\'b0\'a1\

\f0 	*/\
\
typedef char element;\
typedef struct pointer\{\
	struct node_info *head;\
	struct node_info *tail;\
\}pointer;// pointer\
\
typedef struct node_info\{\
	element data; \
	struct node_info* next_pointer;\
	struct node_info* prev_pointer;\
\}node_info;// node
\f1 \'bf\'a1
\f0  
\f1 \'c0\'d6\'b4\'c2
\f0  data\
\
void insert_node(pointer *target,int data)\{\
	node_info *new_node = malloc(sizeof(node_info));//new_node
\f1 \'b8\'a6
\f0  
\f1 \'c7\'cf\'b1\'e2
\f0  
\f1 \'c0\'fc\'c0\'cc
\f0  
\f1 \'b9\'cc\'b8\'ae
\f0  
\f1 \'c3\'ca\'b1\'e2\'c8\'ad
\f0 \
	new_node -> next_pointer = NULL;\
	new_node -> prev_pointer = NULL;\
	new_node -> data = data;\
	if(target->head == NULL) // insert
\f1 \'c7\'d2\'b6\'a7
\f0 , 
\f1 \'c3\'b3\'c0\'bd\'c0\'cf
\f0  
\f1 \'b0\'e6\'bf\'ec
\f0  head
\f1 \'bf\'cd
\f0  tail
\f1 \'bf\'a1
\f0  node
\f1 \'b8\'a6
\f0  
\f1 \'b3\'d6\'be\'ee\'c1\'d8\'b4\'d9
\f0 .\
		target->head = target->tail = new_node;\
\
	else\{ // 
\f1 \'c3\'b3\'c0\'bd\'c0\'cc
\f0  
\f1 \'be\'c6\'b4\'d2
\f0  
\f1 \'b0\'e6\'bf\'ec
\f0 \
		target->tail-> next_pointer = new_node;//tail
\f1 \'b4\'d9\'c0\'bd\'bf\'a1
\f0  new_node
\f1 \'b8\'a6
\f0  
\f1 \'b3\'d6\'be\'ee\'c1\'d8\'b4\'d9
\f0 .\
		new_node->prev_pointer = target->tail;\
		target->tail = new_node; // 
\f1 \'b1\'d7
\f0  
\f1 \'b4\'d9\'c0\'bd
\f0   tail
\f1 \'c0\'ba
\f0  new_node
\f1 \'b7\'ce
\f0  
\f1 \'bc\'b3\'c1\'a4\'c7\'d1\'b4\'d9
\f0 .\
	\}\
\}\
node_info* getNode(node_info *target,char index_char)\{\
	while(target != NULL)\{\
		if(index_char == target->data) break;\
		target = target->next_pointer;\
	/*\
	   
\f1 \'c0\'cc
\f0  
\f1 \'ba\'ce\'ba\'d0\'c0\'bb
\f0  stack
\f1 \'c0\'b8\'b7\'ce
\f0  
\f1 \'b1\'b8\'c7\'f6\'c7\'cf\'b8\'e9
\f0  
\f1 \'b5\'c9
\f0  
\f1 \'b5\'ed
\f0  
\f1 \'c7\'cf\'b4\'d9
\f0 . target
\f1 \'bf\'a1
\f0  
\f1 \'bf\'f8\'c7\'cf\'b4\'c2
\f0  char(
\f1 \'bf\'b9
\f0 : +)
\f1 \'b8\'a6
\f0  
\f1 \'c3\'a3\'b4\'c2
\f0  
\f1 \'c7\'d4\'bc\'f6\'c0\'cc\'b4\'d9
\f0 .\
		break 
\f1 \'ba\'ce\'ba\'d0\'c0\'bb
\f0  
\f1 \'c1\'f6\'bf\'ec\'b0\'ed
\f0  
\f1 \'b4\'d9\'c0\'bd\'c0\'bb
\f0  
\f1 \'b0\'e8\'bc\'d3
\f0  
\f1 \'c1\'f8\'c7\'e0\'c7\'cf\'b8\'e9
\f0  
\f1 \'b5\'c8\'b4\'d9
\f0 .\
		*/\
	\}\
	return target;\
\}\
\
int main(int argc,char* argv[])\{\
	char data;\
	FILE *fp=fopen(argv[1],"r");// argv[1]
\f1 \'bf\'a1\'b4\'c2
\f0  input
\f1 \'c0\'cc
\f0  
\f1 \'c0\'d6\'b4\'d9
\f0 .\
	if(fp==NULL)\
		printf("file not exist"); // file
\f1 \'c0\'cc
\f0  
\f1 \'c1\'b8\'c0\'e7\'c7\'cf\'c1\'f6
\f0  
\f1 \'be\'ca\'c0\'bb
\f0  
\f1 \'b0\'e6\'bf\'ec\'c0\'c7
\f0  
\f1 \'bf\'b9\'bf\'dc\'c3\'b3\'b8\'ae
\f0  
\f1 \'c0\'cc\'b0\'c5
\f0  segmentation Error
\f1 \'b0\'a1
\f0  
\f1 \'b6\'df\'b3\'d7
\f0 ? 
\f1 \'c0\'cc\'b0\'c5
\f0  
\f1 \'bc\'f6\'c1\'a4
\f0  
\f1 \'c7\'d8\'be\'df\'c7\'d4
\f0 \
	pointer *L = (pointer *)malloc(sizeof(pointer)); // L
\f1 \'c0\'ba
\f0  linkedlist
\f1 \'c0\'c7
\f0  
\f1 \'be\'e0\'c0\'da
\f0 \
	L->head = NULL;\
	L->tail = NULL;\
	while(fscanf(fp,"%c",&data)!=EOF)\{\
		if(data == 40 || data == 41 || data == 32 || data == 43 || data == 45 || data == 46 || (data > 47 && data < 58))\{// 
\f1 \'bc\'fd\'c0\'da
\f0  
\f1 \'c8\'a4\'c0\'ba
\f0  +,-,
\f1 \'b0\'f8\'b9\'e9\'c0\'cf
\f0  
\f1 \'b0\'e6\'bf\'ec\'bf\'a1\'b4\'c2
\f0  insert 
\f1 \'c7\'cf\'b4\'c2
\f0  
\f1 \'b0\'cd
\f0 \
			insert_node(L,data);\
		\}\
		else continue;// 
\f1 \'bc\'fd\'c0\'da\'b5\'ee\'c0\'cc
\f0  
\f1 \'be\'c6\'b4\'d2
\f0  
\f1 \'b0\'e6\'bf\'ec
\f0  
\f1 \'b4\'d9\'c0\'bd\'c0\'b8\'b7\'ce
\f0  
\f1 \'b3\'d1\'b1\'e4\'b4\'d9
\f0 .\
	\}\
	fclose(fp);// 
\f1 \'b8\'de\'b8\'f0\'b8\'ae\'b8\'a6
\f0  
\f1 \'c0\'a7\'c7\'d8
\f0  fp
\f1 \'b8\'a6
\f0  
\f1 \'b4\'dd\'b4\'c2\'b4\'d9
\f0 .\
	node_info *curr = L->head; \
	while(curr!=NULL)\{\
		printf("%c",curr->data);\
		/*\
		   
\f1 \'c1\'f6\'b1\'dd
\f0  
\f1 \'c0\'cc
\f0  
\f1 \'ba\'ce\'ba\'d0\'bf\'a1
\f0  printf
\f1 \'c7\'cf\'b4\'c2
\f0  
\f1 \'ba\'ce\'ba\'d0\'c0\'bb
\f0  
\f1 \'bb\'a9\'b0\'ed
\f0  
\f1 \'c8\'c4\'c0\'a7
\f0  
\f1 \'c7\'a5\'b1\'e2\'b9\'fd\'bf\'a1
\f0  
\f1 \'b4\'eb\'c7\'d1
\f0  
\f1 \'c7\'d4\'bc\'f6\'b8\'a6
\f0  
\f1 \'b3\'d6\'c0\'b8\'b8\'e9
\f0  
\f1 \'b5\'c9
\f0  
\f1 \'b0\'cd\'c0\'cc\'b4\'d9
\f0 .\
		   
\f1 \'bb\'f5\'b7\'ce\'bf\'ee
\f0  linked list
\f1 \'b8\'a6
\f0  
\f1 \'b8\'b8\'b5\'e9\'be\'ee\'bc\'ad
\f0  
\f1 \'b4\'d9\'bd\'c3
\f0  insert
\f1 \'c7\'d8\'be\'df\'c7\'d1\'b4\'d9
\f0 .\
		   */\
		curr = curr->next_pointer;\
	\}//curr
\f1 \'bf\'a1
\f0  
\f1 \'c0\'d6\'b4\'c2
\f0  data 
\f1 \'bc\'d2\'c8\'af\'c7\'cf\'b4\'c2
\f0  
\f1 \'ba\'ce\'ba\'d0
\f0 \
	printf("\\n");\
	curr = L->head;\
	node_info *test= getNode(curr,' ');\
	printf("%c",test->data); \
	printf("%c",test->prev_pointer->data); \
	// 
\f1 \'c1\'f6\'b1\'dd\'c0\'ba
\f0  data
\f1 \'b8\'a6
\f0  
\f1 \'bc\'d2\'c8\'af\'c7\'cf\'b4\'c2
\f0  
\f1 \'ba\'ce\'ba\'d0\'c0\'cc\'c1\'f6\'b8\'b8
\f0 , 
\f1 \'b3\'aa\'c1\'df\'bf\'a1\'b4\'c2
\f0  
\f1 \'c8\'c4\'c0\'a7
\f0  
\f1 \'c7\'a5\'b1\'e2\'b9\'fd\'c0\'bb
\f0  
\f1 \'b3\'d6\'b4\'c2
\f0  
\f1 \'ba\'ce\'ba\'d0\'c0\'b8\'b7\'ce
\f0  
\f1 \'c1\'d6\'bc\'ae\'c0\'bb
\f0  
\f1 \'b9\'d9\'b2\'e3
\f0  
\f1 \'c0\'fb\'be\'ee\'be\'df
\f0  
\f1 \'c7\'d1\'b4\'d9
\f0 .\
	curr = L->head;// 
\f1 \'c3\'ca\'b1\'e2\'c8\'ad\'b8\'a6
\f0  
\f1 \'c0\'a7\'c7\'d8
\f0  
\f1 \'b4\'d9\'bd\'c3
\f0  L
\f1 \'c0\'c7
\f0  head 
\f1 \'c6\'f7\'c0\'ce\'c5\'cd\'b7\'ce
\f0  
\f1 \'c0\'cc\'b5\'bf
\f0 \
	while(curr != NULL)\{\
		node_info *next = curr->next_pointer;\
		free(curr);\
		curr = next;\
	\}//
\f1 \'c3\'ca\'b1\'e2\'c8\'ad\'c7\'cf\'b4\'c2
\f0  
\f1 \'ba\'ce\'ba\'d0
\f0 \
	free(L);\
	\
	return 0;\
\
	/*\
	   
\f1 \'c1\'d6\'bc\'ae\'c0\'cc
\f0  
\f1 \'b8\'b9\'c0\'b8\'b8\'e9
\f0  
\f1 \'bf\'c0\'c8\'f7\'b7\'c1
\f0  
\f1 \'b0\'a1\'b5\'b6\'bc\'ba\'c0\'cc
\f0  
\f1 \'b6\'b3\'be\'ee\'c1\'f8\'b4\'d9
\f0 .\
	   
\f1 \'c0\'cc\'b0\'c5\'bf\'a1
\f0  
\f1 \'b4\'eb\'c7\'d8
\f0  
\f1 \'b3\'ed\'c0\'c7
\f0  
\f1 \'c7\'d8\'be\'df
\f0  
\f1 \'c7\'d1\'b4\'d9
\f0 .\
	   */\
\
\
 \}\
}