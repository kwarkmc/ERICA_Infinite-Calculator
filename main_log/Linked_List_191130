{\rtf1\ansi\ansicpg949\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <stdio.h>\
#include <stdlib.h>\
#include <string.h>\
#include <stdbool.h>\
/*\
	
\f1 \'bf\'b9\'c1\'a6 6 \'c3\'df\'b0\'a1 - insert head
\f0 \
	*/\
\
typedef char element;\
typedef struct pointer\{\
	struct node_info *head;\
	struct node_info *tail;\
\}pointer;\
\
typedef struct node_info\{\
	element data; \
	struct node_info* next_pointer;\
	struct node_info* prev_pointer;\
\}node_info;\
\
bool flag = 0;\
\
void insert_node(pointer *target,int data)\{\
	node_info *new_node = malloc(sizeof(node_info));\
	new_node -> next_pointer = NULL;\
	new_node -> prev_pointer = NULL;\
	new_node -> data = data;\
	if(target->head == NULL)\
		target->head = target->tail = new_node;\
	else\{\
		target->tail-> next_pointer = new_node;\
		new_node->prev_pointer = target->tail;\
		target->tail = new_node; \
	\}\
\}//target
\f1 \'c0\'c7
\f0  tail
\f1 \'bf\'a1
\f0  inster 
\f1 \'c7\'cf\'b4\'c2
\f0  
\f1 \'b0\'cd
\f0 \
\
void insert_next_node(node_info *target,int data)\{\
    node_info *new_node = malloc(sizeof(node_info));\
    new_node -> data = data;\
    new_node->prev_pointer = target;\
    new_node->next_pointer = target->next_pointer;\
    target->next_pointer->prev_pointer = new_node;\
    target-> next_pointer = new_node;\
\}// target
\f1 \'c0\'c7
\f0  
\f1 \'b5\'de\'ba\'ce\'ba\'d0\'bf\'a1
\f0  data
\f1 \'b8\'a6
\f0  
\f1 \'b3\'d6\'b4\'c2
\f0  
\f1 \'ba\'ce\'ba\'d0
\f0 \
\
void insert_prev_node(node_info *target,int data)\{\
    node_info *new_node = malloc(sizeof(node_info));\
	new_node->data = data;\
    new_node->next_pointer = target;\
    new_node->prev_pointer = target->prev_pointer;\
	target->prev_pointer->next_pointer = new_node;\
    target->prev_pointer = new_node;\
\}// target
\f1 \'c0\'c7
\f0  
\f1 \'be\'d5\'ba\'ce\'ba\'d0\'bf\'a1
\f0  data
\f1 \'b8\'a6
\f0  
\f1 \'b3\'d6\'b4\'c2
\f0  
\f1 \'ba\'ce\'ba\'d0
\f0 \
\
void insert_head_node(pointer *target,int data)\{\
	node_info *curr = target->head;\
	node_info *new_node = malloc(sizeof(node_info));\
	new_node ->data = data;\
	new_node -> next_pointer = curr;\
	new_node -> prev_pointer = curr->prev_pointer;\
	curr ->prev_pointer = new_node;\
	target->head = target->head->prev_pointer;\
\}//head
\f1 \'bf\'a1
\f0  insert
\f1 \'c7\'cf\'b4\'c2
\f0  
\f1 \'ba\'ce\'ba\'d0
\f0 \
\
node_info* getNode(node_info *target,char index_char)\{\
	/*\
	   getNode
\f1 \'b8\'a6
\f0  
\f1 \'c7\'cf\'b4\'c2
\f0  
\f1 \'b0\'e6\'bf\'ec\'b4\'c2
\f0  
\f1 \'bc\'fd\'c0\'da\'b0\'a1
\f0  
\f1 \'be\'c6\'b4\'d1
\f0  
\f1 \'b9\'ae\'c0\'da\'b8\'a6
\f0  
\f1 \'c3\'a3\'b4\'c2\'b4\'d9
\f0 .\
	   
\f1 \'b8\'b8\'be\'e0\'bf\'a1
\f0  
\f1 \'bc\'fd\'c0\'da\'b8\'a6
\f0  
\f1 \'c3\'a3\'b0\'d4
\f0  
\f1 \'b5\'c7\'b4\'c2
\f0  
\f1 \'b0\'e6\'bf\'ec
\f0  
\f1 \'be\'c6\'b9\'ab\'b7\'b1
\f0  
\f1 \'bc\'fd\'c0\'da\'b0\'a1
\f0  
\f1 \'be\'c8\'b6\'e3\'b0\'cd\'c0\'cc\'b4\'d9
\f0 .\
	   */\
	while(target != NULL)\{\
		if(index_char == target->data) \
			break;\
		target = target->next_pointer;\
	\}\
	return target;\
\}//
\f1 \'c6\'af\'c1\'a4
\f0  index_char
\f1 \'b8\'a6
\f0  target
\f1 \'c0\'c7
\f0  
\f1 \'b5\'de\'ba\'ce\'ba\'d0\'ba\'ce\'c5\'cd
\f0  
\f1 \'c3\'a3\'b4\'c2
\f0  
\f1 \'c7\'d4\'bc\'f6
\f0  \
\
void Display(pointer *list)\{\
	node_info *curr = list->head;\
	printf("\\n=====Display Node=====\\n");\
	while(curr != NULL)\{\
		if(curr->data >= 0 && curr->data <= 9)\
			printf("%d",curr->data); \
		else\
			printf("%c",curr->data);\
		curr=curr->next_pointer;\
	\}\
	printf("\\n=====Display terminated=====\\n");\
\}//linked list
\f1 \'b8\'a6
\f0  display
\f1 \'c7\'cf\'b4\'c2
\f0  
\f1 \'b1\'e2\'b4\'c9
\f0 \
\
void setNode(pointer *target)\{\
	node_info *curr = target->head;\
	if(curr->data >= 0 && curr->data <= 9)\{\
		node_info *new_node = malloc(sizeof(node_info));\
		new_node -> data = 'P';\
		new_node -> next_pointer = curr;\
		new_node -> prev_pointer = curr->prev_pointer;\
		curr -> prev_pointer = new_node;\
		curr = curr->next_pointer;\
		target->head = target->head->prev_pointer;\
	\}else if(curr->data == '-')\{\
		curr->data = 'N';\
	\}\
	\
	/*\
	   
\f1 \'c3\'b3\'c0\'bd
\f0  
\f1 \'bd\'c3\'c0\'db\'c7\'df\'c0\'bb
\f0  
\f1 \'b0\'e6\'bf\'ec\'bf\'a1
\f0  +
\f1 \'c0\'ce
\f0  
\f1 \'b0\'e6\'bf\'ec\'b8\'a6
\f0  
\f1 \'c0\'a7\'c7\'d1
\f0  
\f1 \'c3\'b3\'b8\'ae
\f0 \
	   */\
	while(curr !=NULL)\{\
		if(curr->data == '+')\{\
			if(curr->next_pointer->next_pointer->data >=0 && curr->next_pointer->next_pointer->data <=9)\{\
				curr = curr->next_pointer;\
				node_info *new_node = malloc(sizeof(node_info));\
				/*\
				   
\f1 \'bf\'ac\'bb\'ea\'c0\'da
\f0  
\f1 \'b9\'d7
\f0  
\f1 \'c7\'c7\'bf\'ac\'bb\'ea\'c0\'da
\f0  
\f1 \'bb\'e7\'c0\'cc\'b4\'c2
\f0  
\f1 \'b9\'ab\'c1\'b6\'b0\'c7
\f0  
\f1 \'bd\'ba\'c6\'e4\'c0\'cc\'bd\'ba\'b9\'d9\'b7\'ce
\f0  
\f1 \'b5\'c7\'be\'ee\'c0\'d6\'b3\'aa
\f0 ?\
				   
\f1 \'bf\'b9\'bd\'c3
\f0 2) 123 + 540 - ( 342)	||	123 + 540 - (354)\
				   */\
				new_node -> data = 'P';\
				new_node -> next_pointer = curr->next_pointer;\
				new_node -> prev_pointer = curr;\
				curr -> next_pointer -> prev_pointer = new_node;\
				curr -> next_pointer = new_node;\
			\}\
		\}\
		\
		if(curr->data == '-')\{\
			if(curr->prev_pointer->prev_pointer->data < 0 || curr->prev_pointer->prev_pointer->data > 9)\{\
				curr->prev_pointer->prev_pointer->next_pointer = curr;\
				curr->prev_pointer = curr->prev_pointer->prev_pointer;\
				curr->next_pointer->next_pointer->prev_pointer =curr;\
				curr->next_pointer = curr->next_pointer->next_pointer;\
				curr->data = 'N';\
			\}else if(curr->next_pointer->next_pointer->data >= 0 && curr->next_pointer->next_pointer ->data<=9)\{\
				curr = curr ->next_pointer;\
				node_info *new_node2 = malloc(sizeof(node_info));\
				new_node2 -> data = 'P';\
				new_node2 ->next_pointer = curr ->next_pointer;\
				new_node2 ->prev_pointer = curr;\
				curr -> next_pointer ->prev_pointer = new_node2;\
				curr -> next_pointer = new_node2;\
			\}\
		\}\
		\
		curr = curr->next_pointer;\
	\}\
\}//
\f1 \'c7\'c7\'bf\'ac\'bb\'ea\'c0\'da\'bf\'cd
\f0  
\f1 \'bf\'ac\'bb\'ea\'c0\'da\'b8\'a6
\f0  
\f1 \'b1\'b8\'ba\'b0\'c7\'cf\'b4\'c2
\f0  
\f1 \'c7\'d4\'bc\'f6
\f0 \
\
void setSpace(pointer *target)\{\
	node_info *curr = target->head;\
	while(curr !=NULL)\{\
		if(curr->data == '+' || curr->data == '-' || curr-> data == '*')\{\
			if(curr->prev_pointer->data != ' ')\{\
				node_info *new_node = malloc(sizeof(node_info));\
				new_node->data = ' ';\
				new_node->next_pointer = curr;\
				new_node->prev_pointer = curr->prev_pointer;\
				curr->prev_pointer->next_pointer = new_node;\
				curr->prev_pointer = new_node;\
			\}\
			if(curr->next_pointer->data != ' ')\{\
				node_info *new_node_next = malloc(sizeof(node_info));\
				new_node_next->data = ' ';\
				new_node_next->next_pointer = curr->next_pointer;\
				new_node_next->prev_pointer = curr;\
				curr->next_pointer->prev_pointer = new_node_next;\
				curr->next_pointer = new_node_next;\
			\}\
		\}\
		curr = curr ->next_pointer;\
\
	\}\
\}//space bar
\f1 \'b8\'a6
\f0  
\f1 \'b3\'d6\'b4\'c2
\f0  
\f1 \'ba\'ce\'ba\'d0
\f0 \
\
node_info *setCurr(pointer *target)\{\
	node_info *curr = malloc(sizeof(node_info));\
	curr = target->head;\
	return curr;\
\}//head
\f1 \'b7\'ce
\f0  
\f1 \'b5\'b9\'b8\'ae\'b4\'c2
\f0  
\f1 \'ba\'ce\'ba\'d0
\f0 \
\
void delNode(node_info *target)\{\
	target->prev_pointer->next_pointer = target->next_pointer;\
	target->next_pointer->prev_pointer = target->prev_pointer;\
\}//target
\f1 \'c0\'bb
\f0  
\f1 \'c1\'f6\'bf\'ec\'b4\'c2
\f0  
\f1 \'c7\'d4\'bc\'f6
\f0  \
\
int main(int argc,char* argv[])\{\
	char data;\
	FILE *fp=fopen(argv[1],"r");\
	pointer *L = (pointer *)malloc(sizeof(pointer));\
	L->head = NULL;\
	L->tail = NULL;\
	\
	while(fscanf(fp,"%c",&data)!=EOF)\{\
		if(data >= '0' && data <= '9')\{\
			/*\
			   
\f1 \'bc\'fd\'c0\'da
\f0  - int
\f1 \'b7\'ce\'c0\'c7
\f0  
\f1 \'c7\'fc\'ba\'af\'c8\'af
\f0 \
			   */\
			insert_node(L,atoi(&data));\
		\}\
		else if(data == '.'|| data == '+' || data == '-' || data == ')'|| data == '(')\{\
			/*\
			   char - 
\f1 \'b1\'d7\'b4\'eb\'b7\'ce
\f0  
\f1 \'c0\'af\'c1\'f6
\f0 \
   				*/\
			insert_node(L,data);\
		\}\
		else continue; // 
\f1 \'c0\'df\'b8\'f8\'b5\'c8
\f0  
\f1 \'c0\'d4\'b7\'c2
\f0  
\f1 \'bf\'b9\'bf\'dc\'c3\'b3\'b8\'ae
\f0 \
	\}\
	fclose(fp);\
	setSpace(L);\
	setNode(L);\
	Display(L);\
	node_info *curr;\
	curr = setCurr(L);\
	//
\f1 \'bf\'b9\'c1\'a6
\f0  1\
	/*\
	curr =setCurr(L);\
	while(curr != NULL || curr != test)\{\
		if(curr == test) \{\
			break;\
		\}\
		if(curr->data>=0 && curr->data <= 9) \
			printf("%d",curr->data);\
		else\
			printf("%c",curr->data);\
		curr = curr ->next_pointer;\
	\}\
	*/\
	/*\
	//
\f1 \'bf\'b9\'c1\'a6
\f0  2\
	curr = setCurr(L);\
	while(test != NULL)\{\
		printf("%c",test->data);\
		test = test-> next_pointer;\
	\}\
	*/\
	//
\f1 \'bf\'b9\'c1\'a6
\f0  3/\
	/*\
	Display(L);\
	delNode(test);\
	curr = setCurr(L);\
	Display(L);\
	*/\
	//
\f1 \'bf\'b9\'c1\'a6
\f0  4\
	/*\
	curr = setCurr(L);\
	node_info *test= getNode(curr,'.');\
	delNode(test);\
	Display(L);\
	*/\
	//
\f1 \'bf\'b9\'c1\'a6
\f0  5\
	/*\
	Display(L);\
	curr = setCurr(L);\
	node_info *test = getNode(curr,1);\
	insert_prev_node(test,1);\
//	insert_next_node(test,'.');\
	*/\
	/*\
		test = getNode(curr,'1'); ->Error
\f1 \'b6\'e3\'b0\'cd\'c0\'d4\'b4\'cf\'b4\'d9
\f0 .\
		insert_~_node(test,'1'); string
\f1 \'c0\'cc
\f0  
\f1 \'b5\'e9\'be\'ee\'b0\'a5
\f0  
\f1 \'b0\'cd\'c0\'d4\'b4\'cf\'b4\'d9
\f0 .\
		
\f1 \'c0\'cc
\f0  
\f1 \'b5\'ce
\f0  
\f1 \'bf\'b9\'bd\'c3\'b8\'a6
\f0  
\f1 \'c1\'d6\'c0\'c7\'c7\'d8\'bc\'ad
\f0  
\f1 \'c0\'db\'bc\'ba\'c7\'cf\'bc\'bc\'bf\'e4
\f0 .\
	*/\
	//
\f1 \'bf\'b9\'c1\'a6
\f0  6 - insert_head_node\
	Display(L);\
	curr = setCurr(L);\
	insert_head_node(L,'T');\
	Display(L);\
	\
\
	Display(L);\
\
	curr = setCurr(L);\
	while(curr != NULL)\{\
		node_info *next = curr->next_pointer;\
		free(curr);\
		curr = next;\
	\}//
\f1 \'c3\'ca\'b1\'e2\'c8\'ad\'c7\'cf\'b4\'c2
\f0  
\f1 \'ba\'ce\'ba\'d0
\f0 \
	\
	free(L);\
	\
	return 0;\
\
	/*\
	   
\f1 \'c1\'d6\'bc\'ae\'c0\'cc
\f0  
\f1 \'b8\'b9\'c0\'b8\'b8\'e9
\f0  
\f1 \'bf\'c0\'c8\'f7\'b7\'c1
\f0  
\f1 \'b0\'a1\'b5\'b6\'bc\'ba\'c0\'cc
\f0  
\f1 \'b6\'b3\'be\'ee\'c1\'f8\'b4\'d9
\f0 .\
	   
\f1 \'c0\'cc\'b0\'c5\'bf\'a1
\f0  
\f1 \'b4\'eb\'c7\'d8
\f0  
\f1 \'b3\'ed\'c0\'c7
\f0  
\f1 \'c7\'d8\'be\'df
\f0  
\f1 \'c7\'d1\'b4\'d9
\f0 .\
	   */\
\
\
 \}\
}